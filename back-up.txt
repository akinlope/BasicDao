'reach 0.1';
// 'use strict';


const Persons = {
  seeOutcome: Fun([UInt], Null),
  informTimeout: Fun([], Null)
}

export const main = Reach.App(() => {
  //creating user 1
const user1 = Participant("user1", {
  ...Persons,
  funds: UInt,
  deadline: UInt, 
  informTimeout: Fun([], Null),
 
});
  //creating user 2
const user2 = Participant("user2", {
  ...Persons,
  accepFunds: Fun([UInt], Null),   ///acceptFunds= (funds) => {do wahtsoever with funds}
  informTimeout: Fun([], Null),
  viewIdea1:  Fun([UInt], Null ),
  viewIdea2:  Fun([UInt], Null),
  voteIdea: Fun([], UInt),
  proposeIdea2: Fun([], UInt)
});
  //creating user 3
const user3 = Participant("user3", {
  ...Persons,
  accepFunds: Fun([UInt], Null),
  informTimeout: Fun([UInt], Null),
  proposeIdea3: Fun([], UInt)
});


//declassifiing proposals

const proposer1 ={
  
  };
const proposer2 = {
  
}
init();



//setting timeout
const informTimeout = () => {
  each([user1, user2], ()=> {
    interact.informTimeout();
  })
};


//for user1 only
user1.only(()=> {
  const funds = declassify(interact.funds); 
  const deadline = declassify(interact.deadline) 
  const dProposer1 = declassify(interact.proposeIdea1)
});
  user1.publish(funds, deadline, dProposer1);
  commit();
  user1.pay(funds)
  //must send out 
  commit();
  
  //for user2 only
user2.only(()=> {
  interact.accepFunds(funds);
  const dProposer2 = declassify(interact.proposeIdea2)
});
commit()
user2.pay(funds, dproposer2)
  commit();

  //for user3 only 
  user3.only(()=> {
    interact.accepFunds(funds)
    const dProposer3 = declassify(interact.proposeIdea3)
  });
  commit
user3.pay(funds, dProposer3)
  .timeout(relativeTime(deadline), () => closeTo(user1, informTimeout));
  commit();



//Time to vote
proposer1.publish(proposeIdea);
commit();
proposer2.publish(proposeIdea);
commit();
//proposeIdea for proposer1 and proposer2 will publish idea1 and idea2


//for each user, you will call viewIdea1 and viewIdea2 then voiteIdea

//For voteIdea. it will check if idea received equals idea1 and update vote1, vote2, vote3


// //if(vote1 == idea1 && vote2 == idea1){transfer to proposer1} 
// if(vote1 ==  idea1 && vote2 == idea1){}
// //if(vote1 == idea2 && vote2 == idea2){transfer to proposer 2}
// if(vote1 == idea2 && vote2 == idea2){}
// //if(vote1 == idea1 && vote3 == idea1){transfer to proposer1} 
// if(vote1 == idea1 && vote3 == idea2){}
// //if(vote1 == idea2 && vote3 == idea2){transfer to proposer 2}
// if(vote1 == idea2 && vote3 == idea2){}
// //if(vote2 == idea2 && vote3 == idea2){transfer to proposer 2}
// if(vote2 == idea2 && vote3 == idea2){}
// //if(vote2 == idea1 && vote3 == idea1){transfer to proposer1}}
// if(vote2 == idea1 && vote3 == idea1){}
// //if(true){transfer to proposer1}
// if(true){ }

user2.publish();
transfer(funds * 3).to(user1);
commit();
    exit();
  });


